__kernel void sum(__global const uint16 *color_selected, __global const uint16 *list_available_coordinates, __global const uint16 *count_available_coordinates, __global const uint16 *canvas_painting, __global const uint16 *mode_selected)
{
    int gid = get_global_id(0);

    // # reset minimums
    uint16 distance_found = 65535;
    uint16 distance_minumum = 65535;
    uint16 coordinate_minumum[2] = (65535, 65535);

    uint16 index_neighbor_diffs = 0;
    uint16 coordinate_neighbor[2] = (0,0);
    uint16 list_neighbor_diffs[8] = (0,0,0,0,0,0,0,0);
    uint16 color_difference[3] = (0,0,0);
    uint16 color_difference_squared[3] = (0,0,0);
    uint16 neigborColor[3] = (0,0,0);
    uint16 color_neighborhood_sum[3] = (0,0,0);
    uint16 color_neighborhood_average[3] = (0,0,0);

    // # for every coordinate_available position in the boundry, perform the check, keep the best position:
    for (uint16 index = 0; index < count_available_coordinates[gid]); index++)
    {
        //reset values
        index_neighbor_diffs = 0;
        memset(coordinate_neighbor, 0, sizeof coordinate_neighbor)
        memset(list_neighbor_diffs, 0, sizeof list_neighbor_diffs)
        memset(color_difference, 0, sizeof color_difference)
        memset(color_difference_squared, 0, sizeof color_difference_squared)
        memset(neigborColor, 0, sizeof neigborColor)
        memset(color_neighborhood_average, 0, sizeof color_neighborhood_average)
        memset(color_neighborhood_sum, 0, sizeof color_neighborhood_sum)

        // # Get all 8 neighbors, Loop over the 3x3 grid surrounding the location being considered
        for (uint16 neigbor_x = 0; neigbor_x < 3; neigbor_x++)
        {
            for (uint16 neigbor_y = 0; neigbor_y < 3; neigbor_y++)
            {
                // # this pixel is the location being considered;
                // # it is not a neigbor, go to the next one
                if (neigbor_x == 1 && neigbor_y == 1) {continue;}

                // # calculate the neigbor's coordinates
                coordinate_neighbor[0] = (list_available_coordinates[gid][index][0] - 1 + neigbor_x);
                coordinate_neighbor[1] = (list_available_coordinates[gid][index][1] - 1 + neigbor_y);

                // # neighbor must be in the canvas
                if (coordinate_neighbor[0] < 0) {continue;} // x min
                if (coordinate_neighbor[1] < 0) {continue;} // y min
                if (coordinate_neighbor[0] >= sizeof(canvas_painting/sizeof(canvas_painting[0])) {continue;} // x max
                if (coordinate_neighbor[1] >= sizeof(canvas_painting[0]/sizeof(canvas_painting[0][0])) {continue;} // y max

                // # neighbor must not be black
                if (canvas_painting[coordinate_neighbor[0]][coordinate_neighbor[1]] == (0,0,0)) {continue;}

                // # get colDiff between the neighbor and target colors, add it to the list
                neigborColor = canvas_painting[coordinate_neighbor[0]][coordinate_neighbor[1]];

                // add to the average
                color_neighborhood_sum[0] += neigborColor[0];
                color_neighborhood_sum[1] += neigborColor[1];
                color_neighborhood_sum[2] += neigborColor[2];

                // # use the euclidian distance formula over [R,G,B] instead of [X,Y,Z]
                color_difference[0] = int(color_selected[gid][0]) - int(neigborColor[0]);
                color_difference[1] = int(color_selected[gid][1]) - int(neigborColor[1]);
                color_difference[2] = int(color_selected[gid][2]) - int(neigborColor[2]);
                color_difference_squared[0] = color_difference[0] * color_difference[0];
                color_difference_squared[1] = color_difference[1] * color_difference[1];
                color_difference_squared[2] = color_difference[2] * color_difference[2];

                // sum
                distance_euclidian_aproximation = color_difference_squared[0] + color_difference_squared[1] + color_difference_squared[2];

                //record
                list_neighbor_diffs[index_neighbor_diffs] = distance_euclidian_aproximation;
                index_neighbor_diffs += 1;
            }
        }
        
        // # check operational mode and find the resulting distance
        if (mode_selected == 1)
        {
            // # check if the considered pixel has at least one valid neighbor
            if (index_neighbor_diffs)
            {
                // # return the minimum difference of all the neighbors
                distance_found = 65535;
                for (int i = 0; i < index_neighbor_diffs; i++)
                {
                    if(list_neighbor_diffs[i] < distance_found) {distance_found = list_neighbor_diffs[i];}
                }
            }
            // # if it has no valid neighbors, maximise its colorDiff
            else
            {
                distance_found = 65535;
            }
        }
        else if (mode_selected == 2)
        {
            // # check if the considered pixel has at least one valid neighbor
            if (index_neighbor_diffs)
            {
                // # return the avg difference of all the neighbors
                distance_found = 0;
                for (int i = 0; i < index_neighbor_diffs; i++)
                {
                    distance_found += list_neighbor_diffs[i];
                }
                distance_found = distance_found / index_neighbor_diffs;
            }
            // # if it has no valid neighbors, maximise its colorDiff
            else
            {
                distance_found = 65535;
            }
        }
        else if (mode_selected == 3)
        {
            // # check if the considered pixel has at least one valid neighbor
            if (index_neighbor_diffs)
            {
                // finilize neighborhood color calculation
                color_neighborhood_average[0] = color_neighborhood_sum[0]/index_neighbor_diffs;
                color_neighborhood_average[1] = color_neighborhood_sum[1]/index_neighbor_diffs;
                color_neighborhood_average[2] = color_neighborhood_sum[2]/index_neighbor_diffs;

                // # use the euclidian distance formula over [R,G,B] instead of [X,Y,Z]
                color_difference[0] = color_selected[gid][0] - color_neighborhood_average[0];
                color_difference[1] = color_selected[gid][1] - color_neighborhood_average[1];
                color_difference[2] = color_selected[gid][2] - color_neighborhood_average[2];
                color_difference_squared[0] = color_difference[0] * color_difference[0];
                color_difference_squared[1] = color_difference[1] * color_difference[1];
                color_difference_squared[2] = color_difference[2] * color_difference[2];

                distance_found = color_difference_squared[0] + color_difference_squared[1] + color_difference_squared[2];
            }
            // # if it has no valid neighbors, maximise its colorDiff
            else
            {
                distance_found = 65535;
            }
        }
        // # if it is the best so far save the value and its location
        if (distance_found < distance_minumum)
        {
            distance_minumum = distance_found;
            coordinate_minumum = list_available_coordinates[index];
        }
    }   
    return (color_selected[gid], coordinate_minumum);
}